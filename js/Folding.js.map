{"version":3,"sources":["webpack:///./src/ui/Folding/Folding.ts?db30","webpack:///./src/ui/Sort/SortCriteria.ts?3817*"],"names":[],"mappings":"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","file":"Folding.js","sourcesContent":["import { IQueryResult } from '../../rest/QueryResult';\nimport { Component } from '../Base/Component';\nimport { SortCriteria } from '../Sort/SortCriteria';\nimport { ComponentOptions, IFieldOption } from '../Base/ComponentOptions';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { Utils } from '../../utils/Utils';\nimport { Assert } from '../../misc/Assert';\nimport { QueryEvents, IBuildingQueryEventArgs, IPreprocessResultsEventArgs } from '../../events/QueryEvents';\nimport { Initialization } from '../Base/Initialization';\nimport { IQueryResults } from '../../rest/QueryResults';\nimport { IQuery } from '../../rest/Query';\nimport { $$ } from '../../utils/Dom';\nimport { QueryBuilder } from '../Base/QueryBuilder';\nimport * as _ from 'underscore';\nimport { exportGlobally } from '../../GlobalExports';\n\nexport interface IFoldingOptions {\n  field?: IFieldOption;\n\n  childField?: IFieldOption;\n  parentField?: IFieldOption;\n\n  range?: number;\n  rearrange?: SortCriteria;\n\n  enableExpand?: boolean;\n  expandExpression?: string;\n  maximumExpandedResults?: number;\n\n  /**\n   * Manage folding for each results individually\n   */\n  getResult?: (result: IQueryResult) => IQueryResult;\n  /**\n   * Manage folding of all more results\n   */\n  getMoreResults?: (results: IQueryResult[]) => IQueryResult[];\n}\n\ninterface IResultNode {\n  score: number;\n  parent?: IResultNode;\n  result: IQueryResult;\n  children: IResultNode[];\n}\n\n/**\n * The `Folding` component makes it possible to render hierarchic representations of search results sharing a common\n * [`field`]{@link Folding.options.field}.\n *\n * This component has no visual impact on its own. It simply folds certain search results so that the\n * [`ResultFolding`]{@link ResultFolding} and [`ResultAttachments`]{@link ResultAttachments} components can then nicely\n * render them within result templates (see [Result Templates](https://developers.coveo.com/x/aIGfAQ)).\n *\n * A typical use case of the `Folding` component is to fold email conversations and message board threads results in a\n * result set in order to display them in a convenient format. Messages belonging to a single conversation typically\n * have a unique conversation ID. By indexing this ID on a field, you can use it to fold search results (see\n * [Folding Results](https://developers.coveo.com/x/7hUvAg)).\n *\n * **Note:**\n * > There can only be one `Folding` component per [`Tab`]{@link Tab} component.\n */\nexport class Folding extends Component {\n  static ID = 'Folding';\n\n  static doExport = () => {\n    exportGlobally({\n      'Folding': Folding\n    });\n  }\n\n  /**\n   * The options for the component\n   * @componentOptions\n   */\n  static options: IFoldingOptions = {\n\n    /**\n     * Specifies the name of the field on which to do the folding.\n     *\n     * Specifying a value for this option is required for this component to work.\n     */\n    field: ComponentOptions.buildFieldOption({ required: true }),\n\n    /**\n     * Specifies the field that determines whether a certain result is a child of another top result.\n     *\n     * Default value is `@topparentid`.\n     */\n    childField: ComponentOptions.buildFieldOption({ defaultValue: '@topparentid' }),\n\n    /**\n     * Specifies the field that determines whether a certain result is a top result containing other child results.\n     *\n     * Default value is `@containsattachment`.\n     */\n    parentField: ComponentOptions.buildFieldOption({ defaultValue: '@containsattachment' }),\n\n    /**\n     * Specifies the maximum number of child results to fold.\n     *\n     * **Example:**\n     * > For an email thread with a total of 20 messages, using the default value of `2` means that the component loads\n     * > up to a maximum of 2 child messages under the original message, unless the end user expands the entire\n     * > conversation using the **Show More** link (see the [`enableExpand`]{@link Folding.options.enableExpand}\n     * > option).\n     *\n     * Default value is `2`. Minimum value is `0`.\n     */\n    range: ComponentOptions.buildNumberOption({ defaultValue: 2, min: 0 }),\n\n    /**\n     * Specifies the sort criteria to apply to the top result and its child results (e.g., `date ascending`,\n     * `@myfield descending`, etc. [See\n     * Query Parameters - sortCriteria](https://developers.coveo.com/x/iwEv#QueryParameters-sortCriteriasortCriteria)).\n     *\n     * **Example**\n     * > If you are folding email results by conversation and you specify `date descending` as the `rearrange` value of\n     * > the `Folding` component, the component re-arranges email conversations so that the newest email is always the\n     * > top result. Specifying `date ascending` instead always makes the original email the top result, as it is also\n     * > necessarily the oldest.\n     *\n     * By default, the component displays the results in the order that the index returns them.\n     */\n    rearrange: ComponentOptions.buildCustomOption((value) => Utils.isNonEmptyString(value) ? SortCriteria.parse(value) : null),\n\n    /**\n     * Specifies whether to add a callback function on the top result, allowing to make an additional query to load all\n     * of its child results (e.g., to load all conversations of a given thread).\n     *\n     * Concretely, the [`ResultFolding`]{@link ResultFolding} component uses this for its **Show More** link.\n     *\n     * See also the [`expandExpression`]{@link Folding.options.expandExpression} and\n     * [`maximumExpandedResults`]{@link Folding.options.maximumExpandedResults} options.\n     *\n     * Default value is `true`.\n     */\n    enableExpand: ComponentOptions.buildBooleanOption({ defaultValue: true })\n    ,\n    /**\n     * If the [`enableExpand`]{@link Folding.options.enableExpand} option is `true`, specifies a custom constant\n     * expression to send when querying the expanded results.\n     *\n     * Default value is `undefined`.\n     */\n    expandExpression: ComponentOptions.buildStringOption({ depend: 'enableExpand' }),\n\n    /**\n     * If the [`enableExpand`]{@link Folding.options.enableExpand} option is `true`, specifies the maximum number of\n     * results to load when expanding.\n     *\n     * Default value is `100`. Minimum value is `1`.\n     */\n    maximumExpandedResults: ComponentOptions.buildNumberOption({ defaultValue: 100, min: 1, depend: 'enableExpand' }),\n\n    /**\n     * Specifies the function that manages the individual folding of each result.\n     *\n     * Default value is:\n     *\n     * ```javascript\n     * var results = result.childResults || [];\n     * // Add the top result at the top of the list.\n     * results.unshift(result);\n     * // Empty childResults just to clean it.\n     * result.childResults = [];\n     * // Fold those results.\n     * results = Coveo.Folding.foldWithParent(results);\n     * // The first result is the top one.\n     * var topResult = results.shift();\n     * // All other results are childResults.\n     * topResult.childResults = results;\n     * return topResult;\n     * ```\n     *\n     * You can pre-process all the result with this option in the [`init`]{@link init} call of your search interface:\n     *\n     * ```javascript\n     * Coveo.init(document.querySelector('#search'), {\n     *    Folding: {\n     *      getResult: function(result) {\n     *        result = Coveo.Folding.defaultGetResult(result);\n     *        // Your code here\n     *      }\n     *    }\n     * })\n     * ```\n     */\n    getResult: ComponentOptions.buildCustomOption<(result: IQueryResult) => IQueryResult>(() => {\n      return null;\n    }),\n\n    /**\n     * Specifies the function that manages the folding of all results.\n     *\n     * Default value is:\n     *\n     * ```javascript\n     * Coveo.Folding.defaultGetMoreResults = function(results) {\n     *    // The results are flat, just do the folding.\n     *    return Coveo.Folding.foldWithParent(results);\n     * }\n     * ```\n     */\n    getMoreResults: ComponentOptions.buildCustomOption<(results: IQueryResult[]) => IQueryResult[]>(() => {\n      return null;\n    })\n  };\n\n  /**\n   * Creates a new `Folding` component.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the `Folding` component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   */\n  constructor(public element: HTMLElement, public options: IFoldingOptions, bindings?: IComponentBindings) {\n    super(element, Folding.ID, bindings);\n\n    this.options = ComponentOptions.initComponentOptions(element, Folding, options);\n\n    Assert.check(Utils.isCoveoField(<string>this.options.field), this.options.field + ' is not a valid field');\n    Assert.exists(this.options.maximumExpandedResults);\n\n    this.bind.onRootElement(QueryEvents.buildingQuery, this.handleBuildingQuery);\n    this.bind.onRootElement(QueryEvents.preprocessResults, this.handlepreprocessResults);\n  }\n\n  // From a list of results, return a list of results and their attachments\n  // We use parentResult to build a tree of result\n  static foldWithParent(queryResults: IQueryResult[]): IQueryResult[] {\n    let rootNode: IResultNode = {\n      score: Number.NEGATIVE_INFINITY,\n      children: [],\n      result: <IQueryResult>{\n        raw: false\n      }\n    };\n\n    _.each(queryResults, (queryResult: IQueryResult, i: number) => {\n      let resultNode = Folding.findUniqueId(rootNode.children, queryResult.uniqueId);\n      // If he have no parent or is parent is him self, add it to the root\n      if (queryResult.parentResult == null || queryResult.parentResult.uniqueId == queryResult.uniqueId) {\n        // Add it only if he do not exist\n        if (resultNode == null) {\n          resultNode = {\n            result: queryResult,\n            score: i,\n            children: []\n          };\n          rootNode.children.push(resultNode);\n          resultNode.parent = rootNode;\n        }\n      } else {\n        // If the resultNode already exist\n        if (resultNode != null) {\n          resultNode.score = Math.min(i, resultNode.score);\n          // Remove himself from his parent because it will be added in his parent. This allowed to remove duplicate.\n          resultNode.parent.children = _.without(resultNode.parent.children, resultNode);\n        } else {\n          resultNode = {\n            result: queryResult,\n            score: i,\n            children: []\n          };\n        }\n\n        let parentResult = Folding.findUniqueId(rootNode.children, queryResult.parentResult.uniqueId);\n        // If the parent does not already exist, create it and add it the root\n        if (parentResult == null) {\n          parentResult = {\n            result: queryResult.parentResult,\n            score: Number.POSITIVE_INFINITY,\n            children: []\n          };\n          rootNode.children.push(parentResult);\n          parentResult.parent = rootNode;\n        }\n        // Add the resultNode to parent\n        parentResult.children.push(resultNode);\n        resultNode.parent = parentResult;\n        let parent = parentResult;\n        while (parent != null && resultNode.score < parent.score) {\n          parent.score = resultNode.score;\n          parent = parent.parent;\n        }\n      }\n    });\n    let rootResult = Folding.resultNodeToQueryResult(rootNode);\n    // Remove the root from all results\n    _.each(rootResult.attachments, (attachment) => attachment.parentResult = null);\n    return rootResult.attachments;\n  }\n\n  // 99.9% of the folding case will be alright with those default functions.\n  // Otherwise use the options getResult and getMoreResults\n  public static defaultGetResult(result: IQueryResult) {\n    let results: IQueryResult[] = result.childResults || [];\n    // Add the top result at the top of the list\n    results.unshift(result);\n    // Empty childResults just to make it more clean\n    result.childResults = [];\n    // Fold those results\n    results = Folding.foldWithParent(results);\n    // The first result is the top one\n    let topResult = results.shift();\n    // All other the results are childResults\n    topResult.childResults = results;\n    return topResult;\n  }\n\n  public static defaultGetMoreResults(results: IQueryResult[]) {\n    // The result are flat, just do the fold\n    return Folding.foldWithParent(results);\n  }\n\n  // Convert ResultNode to QueryResult\n  private static resultNodeToQueryResult(resultNode: IResultNode): IQueryResult {\n    let result = resultNode.result;\n    result.attachments = _.map(_.sortBy<IResultNode>(resultNode.children, 'score'), Folding.resultNodeToQueryResult);\n    result.parentResult = resultNode.parent != null ? resultNode.parent.result : null;\n    return result;\n  }\n\n  private static findUniqueId(resultNodes: IResultNode[], uniqueId: string): IResultNode {\n    for (let i = 0; i < resultNodes.length; i++) {\n      if (resultNodes[i].result.uniqueId == uniqueId) {\n        return resultNodes[i];\n      }\n      let resultNode = Folding.findUniqueId(resultNodes[i].children, uniqueId);\n      if (resultNode != null) {\n        return resultNode;\n      }\n    }\n    return null;\n  }\n\n\n  private handleBuildingQuery(data: IBuildingQueryEventArgs) {\n    Assert.exists(data);\n\n    if (!this.disabled) {\n      data.queryBuilder.childField = <string>this.options.childField;\n      data.queryBuilder.parentField = <string>this.options.parentField;\n      data.queryBuilder.filterField = <string>this.options.field;\n      data.queryBuilder.filterFieldRange = this.options.range;\n\n      data.queryBuilder.requiredFields.push(<string>this.options.field);\n      if (this.options.childField != null) {\n        data.queryBuilder.requiredFields.push(<string>this.options.childField);\n      }\n      if (this.options.parentField != null) {\n        data.queryBuilder.requiredFields.push(<string>this.options.parentField);\n      }\n    }\n  }\n\n  private handlepreprocessResults(data: IPreprocessResultsEventArgs) {\n    Assert.exists(data);\n    Assert.check(!data.results._folded, 'Two or more Folding components are active at the same time for the same Tab. Cannot process the results.');\n    data.results._folded = true;\n\n    let queryResults = data.results;\n\n    let getResult: (result: IQueryResult) => IQueryResult = this.options.getResult || Folding.defaultGetResult;\n    queryResults.results = _.map(queryResults.results, getResult);\n    this.addLoadMoreHandler(<IQueryResult[]>queryResults.results, data.query);\n  }\n\n  private addLoadMoreHandler(results: IQueryResult[], originalQuery: IQuery) {\n    return _.map(results, (result) => {\n      if (this.options.enableExpand && !Utils.isNullOrUndefined(Utils.getFieldValue(result, <string>this.options.field))) {\n        result.moreResults = () => {\n          return this.moreResults(result, originalQuery);\n        };\n      }\n      return result;\n    });\n  }\n\n\n  private moreResults(result: IQueryResult, originalQuery: IQuery): Promise<IQueryResult[]> {\n    let query = _.clone(originalQuery);\n    let builder = new QueryBuilder();\n\n    query.numberOfResults = this.options.maximumExpandedResults;\n    let fieldValue = Utils.getFieldValue(result, <string>this.options.field);\n\n    if (Utils.isNonEmptyString(fieldValue)) {\n      builder.advancedExpression.addFieldExpression(<string>this.options.field, '=', [fieldValue]);\n      query.aq = builder.build().aq;\n    }\n\n    if (Utils.isNonEmptyString(originalQuery.q)) {\n\n      // We add keywords to get the highlight and we add @uri to get all results\n      // To ensure it plays nicely with query syntax, we ensure that the needed part of the query\n      // are correctly surrounded with the no syntax block\n      if (originalQuery.enableQuerySyntax) {\n        query.q = `( ${originalQuery.q} ) OR @uri`;\n      } else {\n        query.enableQuerySyntax = true;\n        query.q = `( <@- ${originalQuery.q} -@> ) OR @uri`;\n      }\n    }\n\n    if (Utils.isNonEmptyString(this.options.expandExpression)) {\n      query.cq = this.options.expandExpression;\n    }\n\n    if (this.options.parentField != null) {\n      query.parentField = <string>this.options.parentField;\n    }\n\n    if (this.options.childField != null) {\n      query.childField = <string>this.options.childField;\n    }\n\n    query.filterField = null;\n    query.filterFieldRange = null;\n    query.firstResult = 0;\n\n    if (this.options.rearrange) {\n      this.options.rearrange.putInQueryBuilder(builder);\n      query.sortCriteria = builder.sortCriteria;\n      query.sortField = builder.sortField;\n    } else {\n      query.sortCriteria = originalQuery.sortCriteria;\n      query.sortField = originalQuery.sortField;\n    }\n\n    return this.queryController.getEndpoint().search(query)\n      .then((results: IQueryResults) => {\n        this.handlePreprocessMoreResults(results);\n        return results.results;\n      });\n  }\n\n  private handlePreprocessMoreResults(queryResults: IQueryResults) {\n    let getResults: (results: IQueryResult[]) => IQueryResult[] = this.options.getMoreResults || Folding.defaultGetMoreResults;\n    queryResults.results = getResults(queryResults.results);\n    $$(this.element).trigger(QueryEvents.preprocessMoreResults, {\n      results: queryResults\n    });\n  }\n}\n\nInitialization.registerAutoCreateComponent(Folding);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Folding/Folding.ts","import { Assert } from '../../misc/Assert';\nimport { QueryBuilder } from '../Base/QueryBuilder';\nimport { Utils } from '../../utils/Utils';\nimport { IQueryResult } from '../../rest/QueryResult';\nimport * as _ from 'underscore';\n\nexport class SortCriteria {\n  private static validSorts = ['relevancy', 'date', 'qre'];\n  private static sortsNeedingDirection = ['date'];\n  private static validDirections = ['ascending', 'descending'];\n\n  /**\n   * Create a new SortCriteria\n   * @param sort The sort criteria (e.g.: relevancy, date)\n   * @param direction The direction by which to sort (e.g.: ascending, descending)\n   */\n  constructor(public sort: string, public direction: string = '') {\n    Assert.isNonEmptyString(sort);\n    Assert.check(_.contains(SortCriteria.validSorts, sort) || SortCriteria.sortIsField(sort));\n    if (SortCriteria.sortNeedsDirection(sort)) {\n      Assert.check(_.contains(SortCriteria.validDirections, direction));\n    } else {\n      Assert.check(direction == '');\n    }\n  }\n\n  /**\n   * Return a new SortCriteria from a string\n   * @param criteria The string from which to create the SortCriteria\n   */\n  static parse(criteria: string): SortCriteria {\n    Assert.isNonEmptyString(criteria);\n    var split = criteria.match(/\\S+/g);\n    return new SortCriteria(split[0], split[1]);\n  }\n\n  /**\n   * Put the sort criteria in the passed queryBuilder\n   * @param queryBuilder The queryBuilder in which to put the sort criteria.\n   */\n  public putInQueryBuilder(queryBuilder: QueryBuilder) {\n    Assert.exists(queryBuilder);\n    if (SortCriteria.sortIsField(this.sort)) {\n      queryBuilder.sortCriteria = 'field' + this.direction;\n      queryBuilder.sortField = this.sort;\n    } else if (this.direction != '') {\n      queryBuilder.sortCriteria = this.sort + this.direction;\n    } else {\n      queryBuilder.sortCriteria = this.sort;\n    }\n  }\n\n  /**\n   * Gets the value of the sort criteria from a single {@link IQueryResult}.<br/>\n   * For example, if the sort criteria is 'relevancy', it will return the value of the 'relevancy' field from result.\n   * @param result The {@link IQueryResult} from which to get the value.\n   */\n  public getValueFromResult(result: IQueryResult): any {\n    Assert.exists(result);\n\n    if (SortCriteria.sortIsField(this.sort)) {\n      return Utils.getFieldValue(result, this.sort);\n    } else if (this.sort == 'date') {\n      return result.raw['date'];\n    } else {\n      Assert.fail('Cannot retrieve value: ' + this.sort);\n    }\n  }\n\n  /**\n   * Returns a string representation of the sort criteria (e.g.: 'date ascending').\n   */\n  public toString(): string {\n    if (Utils.isNonEmptyString(this.direction)) {\n      return this.sort + ' ' + this.direction;\n    } else {\n      return this.sort;\n    }\n  }\n\n  /**\n   * Checks if the SortCriteria is equal to another.\n   * @param criteria The SortCriteria to compare with\n   */\n  public equals(criteria: SortCriteria): boolean {\n    Assert.exists(criteria);\n    return criteria.sort == this.sort && criteria.direction == this.direction;\n  }\n\n  private static sortIsField(criteria: string) {\n    return criteria.charAt(0) == '@';\n  }\n\n  private static sortNeedsDirection(sort: string) {\n    return _.contains(SortCriteria.sortsNeedingDirection, sort) || SortCriteria.sortIsField(sort);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Sort/SortCriteria.ts"],"sourceRoot":""}