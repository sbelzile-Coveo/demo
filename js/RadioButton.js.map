{"version":3,"sources":["webpack:///./sass/vapor/_Radio.scss?1475*","webpack:///./src/ui/FormWidgets/RadioButton.ts?94c1*"],"names":[],"mappings":"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","file":"RadioButton.js","sourcesContent":["// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/vapor/_Radio.scss\n// module id = 488\n// module chunks = 4 14 48 70","import { $$ } from '../../utils/Dom';\nimport { IFormWidgetWithLabel, IFormWidgetSelectable } from './FormWidgets';\nimport 'styling/vapor/_Radio';\nimport { exportGlobally } from '../../GlobalExports';\n\n/**\n * A radio button widget with standard styling.\n */\nexport class RadioButton implements IFormWidgetWithLabel, IFormWidgetSelectable {\n\n  protected element: HTMLElement;\n\n  static doExport() {\n    exportGlobally({\n      'RadioButton': RadioButton\n    });\n  }\n\n  /**\n   * Creates a new `RadioButton`.\n   * @param onChange The function to call when the radio button value changes. This function takes the current\n   * `RadioButton` instance as an argument.\n   * @param label The label to display next to the radio button.\n   * @param name The value to set the `input` HTMLElement `name` attribute to.\n   */\n  constructor(public onChange: (radioButton: RadioButton) => void = (radioButton: RadioButton) => {\n  }, public label: string, public name) {\n    this.buildContent();\n  }\n\n  /**\n   * Resets the radio button.\n   */\n  public reset() {\n    const currentlySelected = this.isSelected();\n    this.getRadio().checked = false;\n    if (currentlySelected) {\n      this.onChange(this);\n    }\n  }\n\n  /**\n   * Select the radio button\n   * @param triggerChange will trigger change event if specified and the radio button is not already selected\n   */\n  public select(triggerChange = true) {\n    const currentlySelected = this.isSelected();\n    this.getRadio().checked = true;\n    if (!currentlySelected && triggerChange) {\n      this.onChange(this);\n    }\n  }\n\n  /**\n   * Gets the element on which the radio button is bound.\n   * @returns {HTMLElement} The radio button element.\n   */\n  public build(): HTMLElement {\n    return this.element;\n  }\n\n  /**\n   * Gets the element on which the radio button is bound.\n   * @returns {HTMLElement} The radio button element.\n   */\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getValue(): string {\n    return this.label;\n  }\n\n  /**\n   * Indicates whether the radio button is selected.\n   * @returns {boolean} `true` if the radio button is selected, `false` otherwise.\n   */\n  public isSelected(): boolean {\n    return this.getRadio().checked;\n  }\n\n  /**\n   * Gets the `input` element (the radio button itself).\n   * @returns {HTMLInputElement} The `input` element.\n   */\n  public getRadio(): HTMLInputElement {\n    return <HTMLInputElement>$$(this.element).find('input');\n  }\n\n  /**\n   * Gets the radio button [`label`]{@link RadioButton.label} element.\n   * @returns {HTMLLabelElement} The `label` element.\n   */\n  public getLabel(): HTMLLabelElement {\n    return <HTMLLabelElement>$$(this.element).find('label');\n  }\n\n  private buildContent() {\n    const radioOption = $$('div', { className: 'coveo-radio' });\n    const radioInput = $$('input', { type: 'radio', name: this.name, id: this.label });\n    const labelInput = $$('label', { className: 'coveo-radio-input-label', 'for': this.label });\n    labelInput.text(this.label);\n    radioInput.on('change', () => {\n      this.onChange(this);\n    });\n\n    radioOption.append(radioInput.el);\n    radioOption.append(labelInput.el);\n    this.element = radioOption.el;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/RadioButton.ts"],"sourceRoot":""}