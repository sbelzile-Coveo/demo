{"version":3,"sources":["./src/ui/PipelineContext/PipelineContext.ts"],"names":[],"mappings":"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","file":"PipelineContext.js","sourcesContent":["import { Component } from '../Base/Component';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { Utils } from '../../utils/Utils';\nimport { QueryEvents, IBuildingQueryEventArgs } from '../../events/QueryEvents';\nimport { $$ } from '../../utils/Dom';\nimport { Initialization } from '../Base/Initialization';\nimport * as _ from 'underscore';\nimport { exportGlobally } from '../../GlobalExports';\n\nexport var context: any;\ndeclare var Coveo;\n\nexport interface IPipelineContextOptions {\n}\n\n/**\n * A PipelineContext is used to add contextual information about the environment inside which the query is executed.\n *\n * It allows to pass arbitrary key values pairs ( think `JSON` ), which can then be leveraged by the [Query Pipeline](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=108),\n * or by Coveo Machine Learning.\n *\n * This can be any arbitrary information that you can use to contextualize the query and help Coveo improve relevance by returning results tailored to a specific context.\n *\n * This component is meant to be configured using a script tag, with a JSON content.\n *\n * ```\n * <script class='CoveoPipelineContext' type='text/context'>\n *   {\n *      \"foo\" : \"bar\"\n *   }\n * </script>\n * ```\n *\n * You can also simply use JavaScript code to pass context values, using the {@link QueryBuilder.addContextValue} method.\n *\n * This mean you do not necessarily need to use this component to pass context.\n * ```\n * Coveo.$$(root).on('buildingQuery', function(args) {\n *     args.queryBuilder.addContextValue('foo', 'bar');\n * })\n * ```\n *\n * Using this component as opposed to JavaScript code means you will be able to leverage the interface editor.\n *\n * Regardless of if you use this component or JavaScript to add context, both will add the needed data in the [Query.Context]{@link IQuery.context} parameter.\n */\nexport class PipelineContext extends Component {\n  static ID = 'PipelineContext';\n  static CURRENT_URL = 'CurrentUrl';\n\n  static doExport = () => {\n    exportGlobally({\n      'PipelineContext': PipelineContext,\n      'context': context\n    });\n  }\n\n  private content: { [id: string]: string };\n\n  public constructor(public element: HTMLElement, public options?: IPipelineContextOptions, public bindings?: IComponentBindings) {\n    super(element, PipelineContext.ID, bindings);\n    this.options = ComponentOptions.initComponentOptions(element, PipelineContext, options);\n\n    if (this.element.tagName.toLowerCase() == 'script') {\n      try {\n        // Content can be HTML encoded for special char ({!})\n        this.content = JSON.parse(Utils.decodeHTMLEntities($$(this.element).text()));\n      } catch (e) {\n        try {\n          this.content = JSON.parse($$(this.element).text());\n        } catch (e) {\n          return;\n        }\n      }\n    }\n    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));\n  }\n\n  /**\n   * Return all the context keys configured for context.\n   * @returns {string[]|Array}\n   */\n  public getContextKeys(): string[] {\n    return this.content ? _.keys(this.content) : [];\n  }\n\n  /**\n   * Get the context value associated to the given key.\n   * @param key\n   * @returns {string}\n   */\n  public getContextValue(key: string): string {\n    return this.content[key].replace(/\\{\\!([^\\}]+)\\}/g, (all: string, contextKey: string) => {\n      if (Coveo.context != null && contextKey in Coveo.context) {\n        return Coveo.context[contextKey];\n      } else if (contextKey == PipelineContext.CURRENT_URL) {\n        return window.location.href;\n      }\n      return '';\n    });\n  }\n\n  private handleBuildingQuery(args: IBuildingQueryEventArgs) {\n    let keys = this.getContextKeys();\n    _.each(keys, (key: string) => {\n      args.queryBuilder.addContextValue(key, this.getContextValue(key));\n    });\n  }\n\n\n}\n\nInitialization.registerAutoCreateComponent(PipelineContext);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/PipelineContext/PipelineContext.ts"],"sourceRoot":""}