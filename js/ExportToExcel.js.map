{"version":3,"sources":["./src/ui/ExportToExcel/ExportToExcel.ts","./sass/_ExportToExcel.scss"],"names":[],"mappings":"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","file":"ExportToExcel.js","sourcesContent":["import { Component } from '../Base/Component';\nimport { ComponentOptions, IFieldOption } from '../Base/ComponentOptions';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { SettingsEvents } from '../../events/SettingsEvents';\nimport { ISettingsPopulateMenuArgs } from '../Settings/Settings';\nimport { IAnalyticsNoMeta, analyticsActionCauseList } from '../Analytics/AnalyticsActionListMeta';\nimport { Initialization } from '../Base/Initialization';\nimport { l } from '../../strings/Strings';\nimport * as _ from 'underscore';\nimport { exportGlobally } from '../../GlobalExports';\nimport 'styling/_ExportToExcel';\nimport { SVGIcons } from '../../utils/SVGIcons';\n\nexport interface IExportToExcelOptions {\n  numberOfResults?: number;\n  fieldsToInclude?: IFieldOption[];\n}\n\n/**\n * The ExportToExcel component renders an item in the {@link Settings} menu to allow the end user to export the current\n * search results to the Microsoft Excel format (.xlsx).\n */\nexport class ExportToExcel extends Component {\n  static ID = 'ExportToExcel';\n\n  static doExport = () => {\n    exportGlobally({\n      'ExportToExcel': ExportToExcel\n    });\n  }\n\n  /**\n   * The options for the ExportToExcel\n   * @componentOptions\n   */\n  static options: IExportToExcelOptions = {\n\n    /**\n     * Specifies the number of results to include in the resulting Excel file.\n     *\n     * Generating and downloading the Excel file should take a reasonably short amount of time when using the default\n     * value. However, this amount of time will increase exponentially as you set the value higher.\n     *\n     * Consequently, you should avoid setting this value above the default index limit of 1000 search results.\n     *\n     * Default value is `100`. Minimum value is `1`.\n     */\n    numberOfResults: ComponentOptions.buildNumberOption({ defaultValue: 100, min: 1 }),\n    fieldsToInclude: ComponentOptions.buildFieldsOption()\n  };\n\n  /**\n   * Creates a new ExportToExcel component.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the ExportToExcel component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   * @param _window The global Window object (used to download the Excel link).\n   */\n  constructor(public element: HTMLElement, public options: IExportToExcelOptions, public bindings?: IComponentBindings, public _window?: Window) {\n    super(element, ExportToExcel.ID, bindings);\n    this._window = this._window || window;\n    this.options = ComponentOptions.initComponentOptions(element, ExportToExcel, options);\n    this.bind.onRootElement(SettingsEvents.settingsPopulateMenu, (args: ISettingsPopulateMenuArgs) => {\n      args.menuData.push({\n        text: l('ExportToExcel'),\n        className: 'coveo-export-to-excel',\n        tooltip: l('ExportToExcelDescription'),\n        onOpen: () => this.download(),\n        svgIcon: SVGIcons.icons.dropdownExport,\n        svgIconClassName: 'coveo-export-to-excel-svg'\n      });\n    });\n  }\n\n  /**\n   * Downloads the Excel representation of the current query.\n   *\n   * Also logs an `exportToExcel` event in the usage analytics.\n   */\n  public download() {\n    let query = this.queryController.getLastQuery();\n\n    if (query) {\n      query = _.omit(query, 'numberOfResults');\n      if (this.options.fieldsToInclude) {\n        query.fieldsToInclude = <string[]>this.options.fieldsToInclude;\n      }\n      this.logger.debug('Performing query following \\'Export to Excel\\' click');\n\n      let endpoint = this.queryController.getEndpoint();\n      this.usageAnalytics.logCustomEvent<IAnalyticsNoMeta>(analyticsActionCauseList.exportToExcel, {}, this.element);\n      this._window.location.replace(endpoint.getExportToExcelLink(query, this.options.numberOfResults));\n    }\n  }\n\n  static create(element: HTMLElement, options?: IExportToExcelOptions, root?: HTMLElement): ExportToExcel {\n    return new ExportToExcel(element, options, root);\n  }\n}\n\nInitialization.registerAutoCreateComponent(ExportToExcel);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/ExportToExcel/ExportToExcel.ts","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/_ExportToExcel.scss\n// module id = 589\n// module chunks = 58 70"],"sourceRoot":""}